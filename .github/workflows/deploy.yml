name: PR merge and deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run tests
        uses: './.github/build-and-test'

  ecr:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.12.0
        with:
          build-root-directory: ${{inputs.working-directory}}

      - name: Build and install dependencies
        uses: gradle/gradle-build-action@v2.12.0
        with:
          arguments: |
            clean
            build
            -Dorg.gradle.daemon=true
            -Dorg.gradle.workers.max=2
          build-root-directory: ${{inputs.working-directory}}

      - name: Setup AWS ECR credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}

      - name: Build & push Docker image + Deploy to Kubernetes
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}

  deploy-dev:
    needs: ecr
    uses: ./.github/workflows/deploy-to-env.yml
    with:
      environment: dev
    secrets: inherit

  deploy-prod:
    needs: deploy-dev
    uses: ./.github/workflows/deploy-to-env.yml
    with:
      environment: prod
    secrets: inherit

  vulnerability-report:
    runs-on: ubuntu-latest
    needs: ecr
    permissions:
      id-token: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SNYK_ORG: legal-aid-agency
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Snyk Monitor checks for Java app vulnerabilities
        uses: snyk/actions/gradle@master
        continue-on-error: true # To make sure that further actions are called (e.g. SARIF upload)
        with:
          command: monitor
          args: --severity-threshold=high

      - name: Generate sarif Snyk report
        uses: snyk/actions/gradle@master
        continue-on-error: true
        with:
          args: --org=$SNYK_ORG --sarif-file-output=snyk-app.sarif

      # Fix/hack for Snyk's sarif file to avoid this error uploading to GitHub.
      # See https://github.com/github/codeql-action/issues/2187 for more context.
      - name: Fix undefined values
        run: |
          sed -i 's/"security-severity": "undefined"/"security-severity": "0"/g' snyk-app.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-app.sarif

      # Setup AWS ECR credentials
      - name: Setup AWS ECR credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}

      # Login to AWS ECR container repo
      - uses: aws-actions/amazon-ecr-login@v2
        name: Login to AWS ECR container repo
        id: login-ecr
        with:
          mask-password: true

      - name: Setup Snyk Monitor checks for Docker image vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true # To make sure that further actions are called (e.g. monitor or SARIF upload)
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: 9422f29da0c805864c5fdf0a3e15108726a2df4e # ${{ github.sha }}
        with:
          command: monitor
          image: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          args: --file=Dockerfile --severity-threshold=high